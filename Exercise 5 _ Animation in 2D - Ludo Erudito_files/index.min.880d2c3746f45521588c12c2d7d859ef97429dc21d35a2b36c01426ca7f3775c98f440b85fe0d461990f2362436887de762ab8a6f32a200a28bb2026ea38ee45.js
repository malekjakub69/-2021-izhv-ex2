var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement),f=suggestions.classList.contains('d-none');let c=0;b.keyCode===38&&!f?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&!f&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']},encode:"simple",tokenize:"forward"}),a.add({id:0,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/demonstrations/d1/",title:"Demonstration 1 : Unity Platform",description:"Demonstration Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThe first demonstration first discusses the game loop and then\nfollows with a show of tools used in Unity Game Development\nprocess.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/dem/IZHV_D1_UnityPlatform_dark_handout.pdf"\u003edark\u003c/a\u003e\n\u003ca href="/dem/IZHV_D1_UnityPlatform_light_handout.pdf"\u003elight\u003c/a\u003e\n\u003ca href="/dem/IZHV_D1_UnityPlatform_print_handout.pdf"\u003eprint\u003c/a\u003e\u003c/p\u003e\n'}).add({id:1,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/exercises/e1/",title:"Exercise 1 : Analysis of Mechanics",description:"Exercise Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn this exercise, you are tasked with choosing an arbitrary game-related title and asked to\nanalyze it from the point of its genre and style.\u003c/p\u003e\n\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eDownload the assignment pdf from the \u003ca href="#materials"\u003eMaterials\u003c/a\u003e section and follow the instructions.\u003c/p\u003e\n\u003cp\u003eIf you choose to use the LaTeX template provided below (\u003cem\u003ehighly\u003c/em\u003e recommended), you can easily import it into the online\neditor \u003ca href="https://overleaf.com/"\u003eOverleaf\u003c/a\u003e. Use the \u003cstrong\u003eNew Project\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eUpload Project\u003c/strong\u003e and selecting\nthe downloaded LaTeX template zip file.\u003c/p\u003e\n\u003ch2 id="submit-the-exercise"\u003eSubmit the Exercise\u003c/h2\u003e\n\u003cp\u003eSubmit the results according to the procedure detailed in the \u003ca href="../sub"\u003eExercise Submission\u003c/a\u003e chapter.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003eAssignment : \u003ca href="/exe/e1/IZHV_E1_AnalysisOfMechanics_Assignment.pdf"\u003e[pdf]\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eLaTeX template : \u003ca href="/exe/e1/IZHV_E1_AnalysisOfMechanics_Template.zip"\u003e[zip]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:2,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/l1/",title:"Lecture 1 : What is a Game",description:"Lecture Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn this lecture, we first shortly introduce the course, its goals, people\ninvolved and the schedule.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/lec/IZHV_1_WhatIsAGame_dark_handout.pdf"\u003e[dark]\u003c/a\u003e\n\u003ca href="/lec/IZHV_1_WhatIsAGame_light_handout.pdf"\u003e[light]\u003c/a\u003e\n\u003ca href="/lec/IZHV_1_WhatIsAGame_print_handout.pdf"\u003e[print]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:3,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/demonstrations/d2/",title:"Demonstration 2 : Prototypes and Input",description:"Demonstration Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThe second demonstration shows a use of the Debugging \u0026amp; Profiling\nsystem in Unity, demonstrates the use of both Unity\u0026rsquo;s Input systems,\nand illustrates how to use Game Object and ECS hierarchies.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/dem/IZHV_D2_PrototypesAndInput_dark_handout.pdf"\u003edark\u003c/a\u003e\n\u003ca href="/dem/IZHV_D2_PrototypesAndInput_light_handout.pdf"\u003elight\u003c/a\u003e\n\u003ca href="/dem/IZHV_D2_PrototypesAndInput_print_handout.pdf"\u003eprint\u003c/a\u003e\u003c/p\u003e\n'}).add({id:4,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/exercises/e2/",title:"Exercise 2 : Unity Project",description:"Exercise Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThe goal of this exercise is to get acquainted with the Unity Platform, build\na simple project, and publish it on the web.\u003c/p\u003e\n\u003cp\u003eFirst, follow the instructions to setup the environment and then follow up with\nthe project and publishing steps.\u003c/p\u003e\n\u003cp\u003eIn case of any problems, please see the \u003ca href="#faq"\u003eFAQ\u003c/a\u003e. If your problem is not listed,\ncontact me by e-mail (Tomas Polasek : \u003cscript type="text/javascript" nonce="dXNlcj0iaGVsbG8iLGRvbWFpbj0iaGVua3ZlcmxpbmRlLmNvbSIsZG9jdW1lbnQud3JpdGUodXNlcisiQCIrZG9tYWluKTs="\u003euser="ipolasek",domain="fit.vutbr.cz",document.write(user+"@"+domain);\u003c/script\u003e\u003cnoscript\u003eipolasek at fit.vutbr.cz\u003c/noscript\u003e)\nor on Discord.\u003c/p\u003e\n\u003ch2 id="environment-setup"\u003eEnvironment Setup\u003c/h2\u003e\n\u003cp\u003eThis section contains instruction on how to setup a basic game development environment\nto get started. You can use any text editor you wish. However, you should use the latest\n2021 version of Unity in order to assure compatibility with the provided base project.\u003c/p\u003e\n\u003ch3 id="unity"\u003eUnity\u003c/h3\u003e\n\u003cp\u003eStart by downloading the \u003ca href="https://unity3d.com/get-unity/download"\u003eUnity Hub\u003c/a\u003e and installing\nit. If you are using Linux, you may need to make the AppImage executable first:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ chmod +x UnityHub.AppImage\n$ ./UnityHub.AppImage\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCreate an account, login, and activate a personal license if necessary. Then go to \u003cstrong\u003esettings\u003c/strong\u003e\n(gear icon in top left or right) -\u0026gt; \u003cstrong\u003eAdvanced\u003c/strong\u003e and change the \u003cstrong\u003eChannel\u003c/strong\u003e to \u003cstrong\u003eBeta\u003c/strong\u003e. This\nallows us to use the latest Unity Engine version and the new Unity Hub interface.\u003c/p\u003e\n\u003cp\u003eNext, install the \u003cstrong\u003eUnity Editor\u003c/strong\u003e by going to the main \u003cstrong\u003eUnity Hub\u003c/strong\u003e screen and \u003cstrong\u003eInstalls\u003c/strong\u003e -\u0026gt;\n\u003cstrong\u003eInstall Editor\u003c/strong\u003e. Search the tabs (\u003cstrong\u003eOfficial\u003c/strong\u003e or \u003cstrong\u003ePre-releases\u003c/strong\u003e) for the latest \u003cstrong\u003e2021\u003c/strong\u003e\nversion of the Unity Editor (\u003cstrong\u003e2021.2.0b14\u003c/strong\u003e at the time of writing). Choose \u003cstrong\u003eInstall\u003c/strong\u003e and make\nsure that \u003cstrong\u003eWebGL Build Support\u003c/strong\u003e is enabled under the \u003cstrong\u003ePlatforms\u003c/strong\u003e. The rest of the options is\nup to you. Run the installation in the background, continuing with the instructions.\u003c/p\u003e\n\u003ch3 id="ide"\u003eIDE\u003c/h3\u003e\n\u003cp\u003eThe choice of an Integrated Development Environment (or text editor) is up to you. However\nI recommend using \u003ca href="https://www.jetbrains.com/rider/"\u003eJetBrains Rider\u003c/a\u003e, which is available for\nfree if you are a student. You only need to provide your school e-mail during the registration\nand confirm it, which will allow you to use \u003cstrong\u003eRider\u003c/strong\u003e and many more JetBrains IDEs without any\nsubscription.\u003c/p\u003e\n\u003ch3 id="version-control"\u003eVersion Control\u003c/h3\u003e\n\u003cp\u003eVersion control is an important part of any project and even more so for games which take up\nconsiderable amount of effor to develop. For your Unity projects, you have a choice between:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://docs.unity3d.com/Manual/perForceIntegration.html"\u003ePerforce\u003c/a\u003e : Larger projects with\nmany resources, assets, and collaborators. Usually prevalent in AAA studios.\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://www.plasticscm.com/"\u003ePlastic SCM\u003c/a\u003e : Integrated tools, quite easy to use. Can be\nused for free.\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://unity.github.com/"\u003eGitHub Unity\u003c/a\u003e : Simple, straight-foward for git users, utilizes\nGitHub repositories.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor any real projects, I would recommend to use PlasticSCM or Perforce (Perforce in AAA).\nHowever, with simplicity in mind, we will be using \u003ccode\u003egit\u003c/code\u003e. It has some disadvantages - git is not\nvery good with large files - but that should not pose a problem for smaller projects.\u003c/p\u003e\n\u003cp\u003eStart by \u003ca href="https://git-scm.com/"\u003edownloading\u003c/a\u003e and installing the git command line utility. To test\nthat the installation completed successfully, open a terminal (or command line) and type \u003ccode\u003egit  --version\u003c/code\u003e. You should see the version of you \u003ccode\u003egit\u003c/code\u003e printed out.\u003c/p\u003e\n\u003cdetails\u003e \n\u003csummary\u003eGithub for Unity Details\u003c/summary\u003e\n\u003cp\u003eCurrently, the \u003cstrong\u003eGitHub for Unity\u003c/strong\u003e extension is not working correctly. Thus, we will be using\npure \u003ccode\u003egit\u003c/code\u003e. If you want to try it anyway, use the following instructions.\u003c/p\u003e\n\u003cp\u003eTo start the installation process of \u003cstrong\u003eGitHub for Unity\u003c/strong\u003e, got to the \u003ca href="https://unity.github.com/"\u003eproject homepage\u003c/a\u003e and download the \u003cem\u003einstall manually\u003c/em\u003e version. This will allow us to\ninstall the package later when we get \u003cstrong\u003eUnity Editor\u003c/strong\u003e up and running. Next, you will need a\n\u003ca href="https://github.com/"\u003eGitHub\u003c/a\u003e account - register now or use an already existing one.\u003c/p\u003e\n\u003c/details\u003e\n\u003ch3 id="unity-editor"\u003eUnity Editor\u003c/h3\u003e\n\u003cp\u003eCheck the \u003cstrong\u003eUnity Hub\u003c/strong\u003e and wait until the installation of the editor is finished. Next, go\nto \u003cstrong\u003eProjects\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eNew project\u003c/strong\u003e, choose \u003cstrong\u003eEditor Version\u003c/strong\u003e (\u0026gt;= 2021.2), select \u003cstrong\u003e3D\u003c/strong\u003e and\nfill in \u003cstrong\u003eLocation\u003c/strong\u003e and \u003cstrong\u003eProject name\u003c/strong\u003e. Create the project and wait for the initialization\nto finish - it may take a couple of minutes. You should be greeted by the following screen:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e2/UnityEditor.png" alt="UnityEditor" title="UnityEditor" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eFirst order of business is setting up integration with your preferred IDE. Go to \u003cstrong\u003eEdit\u003c/strong\u003e -\u0026gt;\n\u003cstrong\u003ePreferences\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eExternal Tools\u003c/strong\u003e and select the desired \u003cstrong\u003eExternal Script Editor\u003c/strong\u003e (e.g.,\n\u003cem\u003eRider 2021.2.1\u003c/em\u003e). To make sure the project is setup correctly (and whenever you change IDE),\nalso press the \u003cstrong\u003eRegenerate project files\u003c/strong\u003e button.\u003c/p\u003e\n\u003cp\u003eThe starting window layout is usable but you will probably quickly find that some things are\nnot optimal for you. For an example, I have provided a simple layout in the \u003ca href="#materials"\u003eMaterials\u003c/a\u003e\nsection as an alternative starting point to the official layout. You can use it by first\ndownloading the final and then importing it by \u003cstrong\u003eWindow\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eLayouts\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eLoad Layout from File\u003c/strong\u003e.\nAfter applying the layout, the editor should now look like this:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e2/UnityLayout.png" alt="Unity Layout" title="Unity Layout" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eNext, let us look at how assets and packages work in Unity by installing the Github for Unity. There\nare two ways of installing packages in Unity - manually or from the Asset Store. Manual installation\nstarts by downloading the \u003cstrong\u003e.unitypackage\u003c/strong\u003e and then importing it by \u003cstrong\u003eAssets\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eImport Package\u003c/strong\u003e\n-\u0026gt; \u003cstrong\u003eCustom Package\u0026hellip;\u003c/strong\u003e . This way is more robust and works on all operating systems.\u003c/p\u003e\n\u003cp\u003eHowever, the more user-friendly and expected way is to use the \u003cstrong\u003eAsset Store\u003c/strong\u003e. This is accomplished\nby first locating the package on the \u003ca href="https://assetstore.unity.com/"\u003eAsset Store\u003c/a\u003e website - specifically\n\u003ca href="https://assetstore.unity.com/packages/tools/version-control/github-for-unity-118069"\u003eGithub for Unity\u003c/a\u003e\nin our case - and pressing the \u003cstrong\u003eAdd to My Assets\u003c/strong\u003e. Then, in the \u003cstrong\u003eUnity Editor\u003c/strong\u003e, go to \u003cstrong\u003eWindow\u003c/strong\u003e\n-\u0026gt; \u003cstrong\u003ePackage Manager\u003c/strong\u003e, select \u003cstrong\u003eMy Assets\u003c/strong\u003e in the \u003cstrong\u003ePackages\u003c/strong\u003e dropdown menu, and locate\n\u003cstrong\u003eGihub for Unity\u003c/strong\u003e in the list. Finally, you can install it into the current project by pressing\n\u003cstrong\u003eDownload\u003c/strong\u003e in the bottom right corner, followed by \u003cstrong\u003eImport\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eImport\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThe last step in setting up the editor is the preparation of the \u003ccode\u003egit\u003c/code\u003e command line utility. In case you\nare already familiar with git and have an account on any of the git hosting websites, you can skip this\nstep. If not, go to any of the git hosting services (\u003ca href="https://github.com/"\u003eGitHub\u003c/a\u003e, \u003ca href="https://gitlab.com/"\u003eGitLab\u003c/a\u003e, \u003ca href="https://bitbucket.org/product/%5D"\u003eBitbucket\u003c/a\u003e, \u0026hellip;) and register an account.\u003c/p\u003e\n\u003cdetails\u003e \n\u003csummary\u003eGithub for Unity Details\u003c/summary\u003e\n\u003cp\u003eThe last step in setting up the editor is to initialize and test the GitHub integration. First, go\nto \u003cstrong\u003eWindow\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eGitHub\u003c/strong\u003e in order to open the GitHub settings panel. If you cannot find \u003cstrong\u003eGitHub\u003c/strong\u003e\nunder your \u003cstrong\u003eWindow\u003c/strong\u003e menu, then the \u003cstrong\u003eGitHub for Unity\u003c/strong\u003e is not installed correctly. Next, press the\n\u003cstrong\u003eSign in\u003c/strong\u003e button in the top right corner and login - either through the form or your browser. In\ncase of any problems, see \u003ca href="https://github.com/github-for-unity/Unity/blob/master/docs/using/quick-guide.md"\u003eQuick Guide\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAt this time, you can also test repository creation by pressing \u003cstrong\u003eInitialize a git repository\u003c/strong\u003e in\nthe \u003cstrong\u003eInitialize\u003c/strong\u003e tab and pushing/commiting into the remote. You can either continue using Git\nthrough the Unity UI or switch to terminal / command line. At this point, you can also start using\nGit without \u003cem\u003eGitHub for Unity\u003c/em\u003e by simply performing \u003ccode\u003egit init\u003c/code\u003e in the project directory and copying\nover \u003cstrong\u003e.gitattributes\u003c/strong\u003e, \u003cstrong\u003e.gitignore\u003c/strong\u003e, and \u003cstrong\u003e/assets/.gitignore\u003c/strong\u003e files (recommended).\u003c/p\u003e\n\u003c/details\u003e\n\u003ch2 id="the-exercise"\u003eThe Exercise\u003c/h2\u003e\n\u003cp\u003eThis section focuses on the exercise itself, presuming that you have a working environment by\ncompleting the steps above.\u003c/p\u003e\n\u003cp\u003eYour task during this exercise is threefold:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGet acquainted with the Unity Editor\u003c/li\u003e\n\u003cli\u003eFix the provided game template\u003c/li\u003e\n\u003cli\u003eExport the result and submit it\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id="import-the-project"\u003eImport the Project\u003c/h3\u003e\n\u003cp\u003eDownload the \u003cstrong\u003eproject template\u003c/strong\u003e from the \u003ca href="#materials"\u003eMaterials\u003c/a\u003e section and extract it to where\nyou wish to store your Unity projects. Go to \u003cstrong\u003eUnity Hub\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eProjects\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eOpen\u003c/strong\u003e and select\nthe extracted directory (\u003cstrong\u003eIZHV_E2\u003c/strong\u003e), then open the project. In case of different editor version,\nmake sure you have Unity \u003cstrong\u003e2021.2\u003c/strong\u003e or greater, then switch the project to your version. After the\ninitial import, which may take a couple of minutes, you should be greeted by the following screen:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e2/UnityProject.png" alt="Unity Project" title="Unity Project" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eTo finalize the import, go to \u003cstrong\u003eProject\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eAssets\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eScenes\u003c/strong\u003e (red arrows on the image) and\ndouble click the \u003cstrong\u003eMain\u003c/strong\u003e scene. Next, make sure your viewport is in 2D mode by pressing the \u003cstrong\u003e2D\u003c/strong\u003e\nbutton (red arrow). You also may want to switch your layout (\u003cstrong\u003eWindow\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eLayouts\u003c/strong\u003e). After that,\nyour Unity Editor should look like this:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e2/UnityProjectFixed.png" alt="Unity Project Fixed" title="Unity Project Fixed" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eLastly, you should initialize your Git repository - either by using \u003cem\u003eGitHub for Unity\u003c/em\u003e, \u003cem\u003egit\u003c/em\u003e on the\ncommand line, or any other tool you are comfortable with. This will be important during the submission,\nwhich includes a link to your Git repository. Note: If you don\u0026rsquo;t use \u003cem\u003eGitHub for Unity\u003c/em\u003e, you can use\nany Git hosting service - e.g., \u003ca href="https://gitlab.com/"\u003eGitLab\u003c/a\u003e, \u003ca href="https://bitbucket.org/"\u003eBitBucket\u003c/a\u003e, \u0026hellip;\u003c/p\u003e\n\u003cp\u003eTo setup a repository using the \u003ccode\u003egit\u003c/code\u003e command line utility, first create it your git hosting of choice.\nThen, open terminal / command line in the root directory of the project (containts the \u003cstrong\u003eAssets\u003c/strong\u003e folder)\nand run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git init\n$ git remote add origin \u0026lt;REPOSITORY_URL\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, perform an initial commit:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git add .\n$ git commit -m \u0026quot;Initial Commit for IZHV exercise #2\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand push the changes to the remote repository:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git push origin master\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen verify that the procedure completed successfully by going to the \u003cem\u003e\u0026lt;REPOSITORY_URL\u0026gt;\u003c/em\u003e and check that\nthe files have been added. If you would like to know more about git, you can see the \u003ca href="https://docs.gitlab.com/ee/gitlab-basics/start-using-git.html"\u003eStart Using git\u003c/a\u003e tutorial. Your workflow should consist of\nperiodically uploading your changes, by performing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git add .\n$ git commit -m \u0026quot;Some sensible message about what you changed\u0026quot;\n$ git push origin master\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="the-task"\u003eThe Task\u003c/h3\u003e\n\u003cp\u003eYour actual task in this exercise will be quite simple: \u003cstrong\u003eFix the Game\u003c/strong\u003e. But first, I would advise\nyou to look over the example project and get acquainted with the Unity Editor. The project is setup\nwith some basic directory hierarchy, universal rendering pipeline (URP), and resources. To further\nhelp with getting to know the basics of Unity, some of the following links may be of use:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://learn.unity.com/tutorials"\u003eUnity Learn\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://docs.unity3d.com/2021.2/Documentation/Manual/index.html"\u003eUnity Manual\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAny time you have a problem, Google is your friend. Can\u0026rsquo;t remember how to recover Component from a\nGameObject? Try \u003ca href="https://googlethatforyou.com?q=unity%20docs%20get%20component"\u003eGoogle\u003c/a\u003e! Or, if you\nare really lost, contact me by e-mail (Tomas Polasek : \u003cscript type="text/javascript" nonce="dXNlcj0iaGVsbG8iLGRvbWFpbj0iaGVua3ZlcmxpbmRlLmNvbSIsZG9jdW1lbnQud3JpdGUodXNlcisiQCIrZG9tYWluKTs="\u003euser="ipolasek",domain="fit.vutbr.cz",document.write(user+"@"+domain);\u003c/script\u003e\u003cnoscript\u003eipolasek at fit.vutbr.cz\u003c/noscript\u003e)\nor on Discord where I will hopefully be able to help you.\u003c/p\u003e\n\u003cp\u003eNow that you are more familiar with the Unity Editor, you should try running the game to find what is\nwrong with it. Do so now by pressing the \u003cstrong\u003ePlay\u003c/strong\u003e button (right-pointing triangle on top of the screen).\nAs you can probably feel, there are many problems with this little game - just to name a few:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt is quite difficult : The jump does not clear boxes and the swapping is hard to use.\u003c/li\u003e\n\u003cli\u003eIt is frustrating : Boxes are too large and collisions are unfair.\u003c/li\u003e\n\u003cli\u003eIt is repetitive : The boxes are spawning too regularly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are many ways to improve this little game and make it more \u003cstrong\u003efun\u003c/strong\u003e. In this case, you will even\nget by without any programming. Of course you can the code as well! Your goal now is to take a look at\nthe GameObjects within the scene - specifically the \u003cstrong\u003ePlayer\u003c/strong\u003e and \u003cstrong\u003eSpawner\u003c/strong\u003e - and try playing with\nthe various properties of their Components. Try varying the gravity on the Player\u0026rsquo;s \u003cstrong\u003eRigidbody 2D\u003c/strong\u003e or\ntheir jump in the \u003cstrong\u003ePlayer\u003c/strong\u003e script. Play with the spawn-rate of the Spawner\u0026rsquo;s \u003cstrong\u003eSpawner\u003c/strong\u003e script. If\nyou are feeling adventurous, you can even try to make the boxes appear in interesting patterns by\nmodifying the code of the \u003cstrong\u003eSpawner\u003c/strong\u003e script.\u003c/p\u003e\n\u003cp\u003eOnce you are satisfied with the resulting game, you can move to the next section to export the result.\u003c/p\u003e\n\u003ch3 id="export-the-result"\u003eExport the Result\u003c/h3\u003e\n\u003cp\u003eTo export the results, you should follow the steps specified within the \u003ca href="../sub#unity-exercises"\u003eUnity Exercises\u003c/a\u003e\nsection of the \u003ca href="../sub"\u003eExercise Submission\u003c/a\u003e chapter.\u003c/p\u003e\n\u003ch2 id="submit-the-exercise"\u003eSubmit the Exercise\u003c/h2\u003e\n\u003cp\u003eSubmit the results according to the procedure detailed in the \u003ca href="../sub"\u003eExercise Submission\u003c/a\u003e chapter.\u003c/p\u003e\n\u003ch2 id="faq"\u003eFAQ\u003c/h2\u003e\n\u003cp\u003eFollowing are some problems and solutions which may occur during this exercise:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNone so far!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003eUnity Editor Layout : \u003ca href="/exe/e2/UnityEditorLayout.wlt"\u003e[wlt]\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eProject Template : \u003ca href="/exe/e2/IZHV_E2.zip"\u003e[zip]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:5,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/l2/",title:"Lecture 2 : Game Design",description:"Lecture Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThis lecture introduces game design, genres, and mechanics.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/lec/IZHV_2_GameDesign_dark_handout.pdf"\u003e[dark]\u003c/a\u003e\n\u003ca href="/lec/IZHV_2_GameDesign_light_handout.pdf"\u003e[light]\u003c/a\u003e\n\u003ca href="/lec/IZHV_2_GameDesign_print_handout.pdf"\u003e[print]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:6,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/demonstrations/d3/",title:"Demonstration 3 : Visualization Forms",description:"Demonstration Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThe third demonstration shows a basic use materials in Unity, as well\nas shaders - both in their code-based variant and utilizing Shader\nGraph - and visual effects.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/dem/IZHV_D3_FormsOfVisualization_dark_handout.pdf"\u003edark\u003c/a\u003e\n\u003ca href="/dem/IZHV_D3_FormsOfVisualization_light_handout.pdf"\u003elight\u003c/a\u003e\n\u003ca href="/dem/IZHV_D3_FormsOfVisualization_print_handout.pdf"\u003eprint\u003c/a\u003e\u003c/p\u003e\n'}).add({id:7,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/exercises/e3/",title:"Exercise 3 : Entity Control",description:"Exercise Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn this exercise, you will implement a couple of simple behaviors, work with the Unity Input\nSystem, and implement local multiplayer.\u003c/p\u003e\n\u003cp\u003eIn case of any problems, please see the \u003ca href="../e2"\u003esecond exercise\u003c/a\u003e (especially the \u003ca href="../e2#faq"\u003eFAQ\u003c/a\u003e). If the issues persist, contact me by e-mail (\u003cscript type="text/javascript" nonce="dXNlcj0iaGVsbG8iLGRvbWFpbj0iaGVua3ZlcmxpbmRlLmNvbSIsZG9jdW1lbnQud3JpdGUodXNlcisiQCIrZG9tYWluKTs="\u003euser="ipolasek",domain="fit.vutbr.cz",document.write(user+"@"+domain);\u003c/script\u003e\u003cnoscript\u003eipolasek at fit.vutbr.cz\u003c/noscript\u003e) or on Discord.\u003c/p\u003e\n\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eThis exercise consists of three segments. It is recommended to follow the order:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cem\u003eGun\u003c/em\u003e and \u003cem\u003eEnemy\u003c/em\u003e Behavior\u003c/li\u003e\n\u003cli\u003eAlternative Control Scheme\u003c/li\u003e\n\u003cli\u003eLocal Multiplayer\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDownload the \u003cstrong\u003eproject template\u003c/strong\u003e from the \u003ca href="#materials"\u003eMaterials\u003c/a\u003e section and follow the same\ngeneral procedure as in the \u003ca href="../e2#import-the-project"\u003esecond exercise\u003c/a\u003e. However, this time, do\n\u003cstrong\u003enot\u003c/strong\u003e use the 2D view, since the template is built in 3D. The primary control scheme already\nimplemented within the game is following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eWASD\u003c/strong\u003e : Movement\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMouse\u003c/strong\u003e : Aiming\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLeft Mouse Button\u003c/strong\u003e : Shoot\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSpace\u003c/strong\u003e : Switch Mode of Fire\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="gun-and-enemy-behavior"\u003eGun and Enemy Behavior\u003c/h3\u003e\n\u003cp\u003eStart by implementing the \u003cem\u003eGun\u003c/em\u003e behavior by modifying the \u003cstrong\u003eScripts/Game/Gun.cs\u003c/strong\u003e script. First,\nstart up the game and try combination of moving and shooting. Notice, that the bullets doe not\noriginate within the gun, but are instead spawned at the origin. Your goal will be to ammend this\nproblem and implement a secondary mode of fire.\u003c/p\u003e\n\u003cp\u003eThe primary code should be contained within the \u003cstrong\u003eShootGun\u003c/strong\u003e method starting on \u003cstrong\u003eline 187\u003c/strong\u003e.\nFirst modify the script so that the bullets are correctly oriented and positioned even for moving\nplayers. Then, follow by creating a second mode for the weapon by using the \u003cstrong\u003eshotgun\u003c/strong\u003e switch\n(activated by \u0026lt;SPACE\u0026gt; by default). The second mode does not necessarily need to be a real shotgun,\nbut it should be sufficiently different from the main mode of the weapon.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e3/FirstTaskASmall.png" alt="First Task A" title="First Task A" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eWhen you get the weapon to work (you will \u003cem\u003eneed\u003c/em\u003e it), continue with implementing the \u003cem\u003eEnemy\u003c/em\u003e\nbehavior. First, enable the spawners already placed within the scene (\u003cem\u003eEnemySpawner\u003c/em\u003e and\n\u003cem\u003eMultipleSpawners\u003c/em\u003e). Notice, that the enemies spawned currently do nothing interesting. Your\ngoal will be to make the enemies follow the player. Implement a simple AI which will follow\nthe closest player, by modifying the \u003cstrong\u003eFixedUpdate\u003c/strong\u003e method in the \u003cstrong\u003eScripts/Game/Enemy.cs\u003c/strong\u003e\nscript, on \u003cstrong\u003eline 60\u003c/strong\u003e.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e3/FirstTaskBSmall.png" alt="First Task B" title="First Task B" class="img"\u003e\n\u0026nbsp;\n\n\n\u003ch3 id="alternative-control-scheme"\u003eAlternative Control Scheme\u003c/h3\u003e\n\u003cp\u003eTo create an alternative control scheme usable by the main character, you will need to modify\nthe default \u003cem\u003eAction Mapping\u003c/em\u003e in \u003cstrong\u003eInput/PlayerInput.inputactions\u003c/strong\u003e. Open the mapping and start\nby creating a secondary control scheme. Then, add secondary bindings for each of the pimary\nactions, using one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLeft Stick\u003c/strong\u003e : Movement\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRight Stick\u003c/strong\u003e : Aiming\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSouth Button\u003c/strong\u003e | \u003cstrong\u003eRight Trigger\u003c/strong\u003e : Shoot\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNorth Button\u003c/strong\u003e : Switch Mode of Fire\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn case you don\u0026rsquo;t have a controller on hand, you can use the virtual controls provided under\nthe \u003cem\u003eCanvas\u003c/em\u003e GameObject. To enable the virtual controls, select the \u003cem\u003eVirtualController\u003c/em\u003e and\nenable the GameObject by using the checkbox in the \u003cem\u003eInspector\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eFinally, make sure that the \u003cstrong\u003ePlayerInput\u003c/strong\u003e Component on the \u003cstrong\u003ePrefabs/Player.prefab\u003c/strong\u003e is correctly\nset to accept any of the available schemes and auto-switching is enabled.\u003c/p\u003e\n\u003ch3 id="local-multiplayer"\u003eLocal Multiplayer\u003c/h3\u003e\n\u003cp\u003eFinally, you will modify the game so that the newly added control scheme does not work as an\nalternative means of controling the main player, but instead allows multiple players to play at\nthe same time.\u003c/p\u003e\n\u003cp\u003eStart by adding the \u003cstrong\u003ePlayer Input Manager\u003c/strong\u003e Component to the scene. The addition and removal of\nthe players is handled automatically. However, if you want to detect when a new player joints or\nleaves, see the main \u003cem\u003eSettings\u003c/em\u003e script \u003cstrong\u003eScripts/Game/Settings.cs\u003c/strong\u003e \u003cstrong\u003eline 97\u003c/strong\u003e. The second player\nshould appear once any button in the secondary control scheme is used. For further hints, consult\nthe the \u003ca href="https://docs.unity3d.com/Packages/com.unity.inputsystem@0.2/api/UnityEngine.InputSystem.Plugins.PlayerInput.PlayerInputManager.html"\u003eUnity Documentation\u003c/a\u003e on the subject.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e3/ThirdTaskSmall.png" alt="Third Task" title="Third Task" class="img"\u003e\n\u0026nbsp;\n\n\n\u003ch3 id="bonus-ecs-performance"\u003eBonus: ECS Performance\u003c/h3\u003e\n\u003cp\u003eThe project is setup with support for both GameObject and ECS hieararchy. If you are interested in trying\nout the Entity-Component-System paradigm, you can switch to it from the GameObject-based approach by using\nthe \u003cstrong\u003eUseECS\u003c/strong\u003e switch in the \u003cstrong\u003eSettings\u003c/strong\u003e GameObject (make sure to disable \u003ca href="#faq"\u003ebefore export\u003c/a\u003e). The game\nshould basically perform the same, with some minor differences in the physics. To see how it was implemented,\nsee the source codes in the \u003cstrong\u003eScripts/Game/ECS\u003c/strong\u003e folder, along with conditional code (\u003cstrong\u003emUseECS\u003c/strong\u003e) in the\n\u003cstrong\u003eEnemySpawner.cs\u003c/strong\u003e, \u003cstrong\u003eGun.cs\u003c/strong\u003e, and \u003cstrong\u003ePlayer.cs\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eAs a small experiment, you can try increasing the \u003cem\u003erate of fire\u003c/em\u003e to extreme levels and compare the performance\nbetween the GameObject-based approach and when using the ECS. To assist with this, I have added a performance\ngraph, which can be toggled by pressing the \u003cstrong\u003eF10\u003c/strong\u003e key. For deeper analysis, you can also check the \u003cstrong\u003eProfiler\u003c/strong\u003e\navailable under \u003cstrong\u003eWindow\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eAnalysis\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eProfiler\u003c/strong\u003e. For details specifically pertaining to the ECS,\nsee the \u003cstrong\u003eEntity Debugger\u003c/strong\u003e from \u003cstrong\u003eWindow\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eAnalysis\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eEntity Debugger\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id="submit-the-exercise"\u003eSubmit the Exercise\u003c/h2\u003e\n\u003cp\u003eSubmit the results according to the procedure detailed in the \u003ca href="../sub"\u003eExercise Submission\u003c/a\u003e chapter.\u003c/p\u003e\n\u003ch2 id="faq"\u003eFAQ\u003c/h2\u003e\n\u003cp\u003eFollowing are some problems and solutions which may occur during this exercise:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eExport fails with errors concerning materials: Check the \u003cstrong\u003eSettings\u003c/strong\u003e GameObject and make sure UseECS\nis disabled. WebGL export currently does not support the Hybrid Rendering, which is used within the ECS.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003eProject Template : \u003ca href="/exe/e3/IZHV_E3.zip"\u003e[zip]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:8,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/l3/",title:"Lecture 3 : Game Engine",description:"Lecture Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn this lecture, we introduce an overview of a game engine, its\nsystems, and their purpose.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/lec/IZHV_3_GameEngine_dark_handout.pdf"\u003e[dark]\u003c/a\u003e\n\u003ca href="/lec/IZHV_3_GameEngine_light_handout.pdf"\u003e[light]\u003c/a\u003e\n\u003ca href="/lec/IZHV_3_GameEngine_print_handout.pdf"\u003e[print]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:9,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/demonstrations/d4/",title:"Demonstration 4 : Physical Interaction",description:"Demonstration Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn the fourth demonstration we will take a look at animation both in\n2D and 3D. Starting with Unity sprite editor, asset import, and 2D\ncharacter rigging. Next are some basics of asset creation for 3D\nanimation in Blender. Finally, we look at actually animating our\ncharacters using Unity\u0026rsquo;s Animation System and Animation Controllers.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/dem/IZHV_D4_PhysicalInteraction_dark_handout.pdf"\u003edark\u003c/a\u003e\n\u003ca href="/dem/IZHV_D4_PhysicalInteraction_light_handout.pdf"\u003elight\u003c/a\u003e\n\u003ca href="/dem/IZHV_D4_PhysicalInteraction_print_handout.pdf"\u003eprint\u003c/a\u003e\u003c/p\u003e\n'}).add({id:10,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/exercises/e4/",title:"Exercise 4 : Materials and Effects",description:"Exercise Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn this exercise, you will play the role of a kitchen designer by creating several materials\nusing both the Unity material shaders, and the Shader Graph system.\u003c/p\u003e\n\u003cp\u003eIn case of any problems, please see the \u003ca href="../e2"\u003esecond exercise\u003c/a\u003e (especially the \u003ca href="../e2#faq"\u003eFAQ\u003c/a\u003e). If the issues persist, contact me by e-mail (\u003cscript type="text/javascript" nonce="dXNlcj0iaGVsbG8iLGRvbWFpbj0iaGVua3ZlcmxpbmRlLmNvbSIsZG9jdW1lbnQud3JpdGUodXNlcisiQCIrZG9tYWluKTs="\u003euser="ipolasek",domain="fit.vutbr.cz",document.write(user+"@"+domain);\u003c/script\u003e\u003cnoscript\u003eipolasek at fit.vutbr.cz\u003c/noscript\u003e) or on Discord.\u003c/p\u003e\n\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eThis exercise takes you through the process of material creation and utilization:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreating Unity Materials and using the \u003cem\u003ebuiltin lighting models\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eUsing the \u003cem\u003eShader Graph\u003c/em\u003e to implement a simple procedural wood material\u003c/li\u003e\n\u003cli\u003e\u003cem\u003ePersonalizing\u003c/em\u003e the kitchen model\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDownload the \u003cstrong\u003eproject template\u003c/strong\u003e from the \u003ca href="#materials"\u003eMaterials\u003c/a\u003e section and follow the same\ngeneral procedure as in the case of previous exercises. In case of problems, see the information\nin the \u003ca href="../e2#import-the-project"\u003esecond exercise\u003c/a\u003e, using the 3D editor mode.\u003c/p\u003e\n\u003cp\u003eAfter setting up the project and running it, you should be able to walk through the kitchen,\ncontroling the character with a standard first person control scheme.\u003c/p\u003e\n\u003ch3 id="using-unity-materials"\u003eUsing Unity Materials\u003c/h3\u003e\n\u003cp\u003eBy default, Unity supports several material types, which you will find quite useful in your\nfuture projects. After looking through the kitchen scene, you should notice that something\nis wrong with the kitchen sink. Its bright purple color signifies, that there is a problem\nwith its material. Select the sink and see that indeed, under \u003cstrong\u003eMesh Renderer\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eMaterials\u003c/strong\u003e\n-\u0026gt; \u003cstrong\u003eElement 0\u003c/strong\u003e, we have no material selected. Now, let us remedy this problem.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/SinkBroken.png" alt="Broken Sink" title="Broken Sink" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eNavigate to \u003cstrong\u003eAssets/Materials/Kitchen\u003c/strong\u003e and create a new material through the context menu\n\u003cstrong\u003eCreate\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eMaterial\u003c/strong\u003e. Name the newly created material \u003cstrong\u003eSink\u003c/strong\u003e and display its details\nin the Inspector. You should see the following information:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/SinkDefaultLit.png" alt="Default Lit Shader" title="Default Lit Shader" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eThe topmost parameter \u003cstrong\u003eShader\u003c/strong\u003e defines which shader is being used by the material. The\nshader gives the material its color and various other properties. By default, the newly\ncreated material should already be using the Shader: \u003cstrong\u003eUniversel Render Pipeline/Lit\u003c/strong\u003e.\nNow, switch to the much simpler \u003cstrong\u003eUnlit\u003c/strong\u003e shader, by using \u003cstrong\u003eShader\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eUniversal Render Pipeline\u003c/strong\u003e\n-\u0026gt; \u003cstrong\u003eUnlit\u003c/strong\u003e. The inspector should reflect this change by updating the available material\nproperties:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/SinkDefaultUnlit.png" alt="Default Unlit Shader" title="Default Unlit Shader" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eSwitch back to the \u003cstrong\u003eLit\u003c/strong\u003e shader (using \u003cstrong\u003eUniversal Render Pipeline\u003c/strong\u003e version) and play\nwith the values under the \u003cstrong\u003eSurface Inputs\u003c/strong\u003e to see the preview change. For now, skip\nthe \u003cem\u003eNormal\u003c/em\u003e, \u003cem\u003eHeight\u003c/em\u003e, and \u003cem\u003eOcclusion\u003c/em\u003e map, which will be part of later exercise. You\nshould intuitively understand what each of the parameters does.\u003c/p\u003e\n\u003cp\u003eYou \u003cstrong\u003efirst task\u003c/strong\u003e will be to modify the parameters of the \u003cstrong\u003eLit\u003c/strong\u003e shader to make it look\nlike something a sink could be made of - e.g., steel. You might end up with something like\nthis:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/SinkSteel.png" alt="Sink Steel Material" title="First Task A" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eNow that we have the material created, we only need to actually use it in the scene. Select\nthe sink, again checking under \u003cstrong\u003eMesh Renderer\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eElement 0\u003c/strong\u003e, press the selection\ncircle and select the \u003cstrong\u003eSink\u003c/strong\u003e material. After you finish, you should see the sink being\ncorrectly colored:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/SinkFixed.png" alt="Fixed Sink" title="Fixed Sink" class="img"\u003e\n\u0026nbsp;\n\n\n\u003ch3 id="shader-graph-and-procedural-wood"\u003eShader Graph and Procedural Wood\u003c/h3\u003e\n\u003cp\u003eLet us move to another problem (there are many), which is how flat and uninspiring the\nsurfaces throughout the kitchen are. Take for example the table:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/TableBoring.png" alt="Boring Table" title="Boring Table" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eHow do we fix this? We \u003cem\u003ecould\u003c/em\u003e use wood texture, mapping them onto the table by selecting the\n\u003cstrong\u003eBase Map\u003c/strong\u003e in the \u003cstrong\u003eLit\u003c/strong\u003e shader. However, we ould need to make these textures in some external\nprogram first. Let us instead use the \u003cstrong\u003eShader Graph\u003c/strong\u003e to create the wood grain procedurally.\u003c/p\u003e\n\u003cp\u003eFirst, go to \u003cstrong\u003eAssets\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eShaders\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eKitchen\u003c/strong\u003e and create a new Shader Graph through the\n\u003cstrong\u003eCreate\u003c/strong\u003e menu: \u003cstrong\u003eShader Graph\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eURP\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eLit Shader Graph\u003c/strong\u003e, naming it \u003cstrong\u003eSimpleWoodSG\u003c/strong\u003e.\nDouble click the newly created asset and you should be greeted by the Shader Graph editor:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/ShaderGraphEditor.png" alt="Shader Graph Editor" title="Shader Graph Editor" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eIt consists of several parts. In the middle, the large board is the actual editing area. It consists\nof nodes, which perform operations, and edges, which facilitate the flow of data. Usually, each node\nhas several input/output slots, which are signified by small circles. When on the left side, they\nrepresent the inputs, while circles on the right side are the nodes\' outputs. As you can see, we\nalready have two nodes added, thanks to choosing the \u003cstrong\u003eLit Shader Graph\u003c/strong\u003e template. As was detailed\nduring the lecture, we use the \u003cstrong\u003eVertex\u003c/strong\u003e and \u003cstrong\u003eFragment\u003c/strong\u003e shader.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003eVertex\u003c/strong\u003e shader takes the vertices of the input primitives and transforms them into the correct\nposition, while the \u003cstrong\u003eFragment\u003c/strong\u003e shader generates the final colors. You will mostly work with the\n\u003cstrong\u003eFragment\u003c/strong\u003e shader, but both have their uses. As you can see, the Fragment shader node has the same\nproperties as the \u003cstrong\u003eLit\u003c/strong\u003e shader we looked at earlier. Let us now use this node to modify the color\nof the material.\u003c/p\u003e\n\u003cp\u003eMost node inputs can be modified by either connecting another nodes\' output, or changing the value\ndirectly. Click the color selector on the right side of the \u003cstrong\u003eBase Color\u003c/strong\u003e property and change the\ncolor. Notice, that the material\u0026rsquo;s preview changes in accord to your modifications.\u003c/p\u003e\n\u003cp\u003eFinal important part of the Graph Editor UI is the \u003cstrong\u003eProperty Window\u003c/strong\u003e, by default in the top left\ncorner. Within this window, you can add custom properties, which will be later available in the Unity\neditor.\u003c/p\u003e\n\u003cp\u003eLet us start the creation of our procedural wood shader by adding the base color of the wood. Click\nthe \u003cstrong\u003e+\u003c/strong\u003e in the \u003cstrong\u003eProperty Window\u003c/strong\u003e and add a new \u003cstrong\u003eColor\u003c/strong\u003e, naming it \u003cstrong\u003eBaseColor\u003c/strong\u003e. Select the\nproperty and see the last part of the Shader Graph editor, the \u003cstrong\u003eGraph Inspector\u003c/strong\u003e, specifically the\n\u003cstrong\u003eNode Settings\u003c/strong\u003e for information about the property. Modify the default color to \u003cstrong\u003ebrown\u003c/strong\u003e. Now,\ndrag the \u003cstrong\u003eBaseColor\u003c/strong\u003e property to the working area and connect its output to the Base Color input\nof the Fragment node. As a result, your material preview should update to look something like this:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/TableBaseColor.png" alt="Table Base Color" title="Table Base Color" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eTo add new node, use the right-click menu -\u0026gt; \u003cstrong\u003eCreate Node\u003c/strong\u003e, or simply press \u003cstrong\u003espace\u003c/strong\u003e. There are many\ntypes of nodes and most of them are documented in the \u003ca href="https://docs.unity3d.com/Packages/com.unity.shadergraph@11.0/manual/Node-Library.html"\u003eShader Graph Documentation\u003c/a\u003e.\nAdd a \u003cstrong\u003eGradient Noise\u003c/strong\u003e node and a \u003cstrong\u003eMultiply\u003c/strong\u003e node, connecting them in a following configuration:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/TableWoodGradientNoise.png" alt="Table Wood Gradient Noise" title="Table Wood Gradient Noise" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eLooking at the material preview, it does not yet look quite like wood, but we are definitely moving\nin the right direction. One of the special types of nodes is the \u003cstrong\u003eCustom Function\u003c/strong\u003e node, which\nallows us to actually write code as a part of our Shader Graph. Add it now, select it and see the\nGraph Inspector. Notice, that we can specify inputs and outputs of the node. But most importantly,\nwe can switch the \u003cstrong\u003eType\u003c/strong\u003e to \u003cstrong\u003eString\u003c/strong\u003e and write code directly within the inspector. We will use\nit to implement a simple contour shader, using the code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efloat scale = 10.0;\nA *= scale;\nOut = smoothstep(0.0, \n    0.5 + B * 0.5, \n    abs(sin(A * 3.141)  + B * 2.0) *  0.5\n);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eConfigure the node according to the following image:\n\n\n\u003cimg src="/exe/e4/TableWoodContourNode.png" alt="Table Wood Contour Node" title="Table Wood Contour Node" class="img"\u003e\n\u0026nbsp;\n\n\nand then connect the nodes as follows:\n\n\n\u003cimg src="/exe/e4/TableWoodSharpFeatures.png" alt="Table Wood Sharp Features" title="Table Wood Sharp Features" class="img"\u003e\n\u0026nbsp;\n\n\u003c/p\u003e\n\u003cp\u003eAs you can see, we are now creating some sharp patterns, which look a little like wood grain. Now, you\ncan either complete the shader on you own, or use the hidden spoiler image and copy the solution.\u003c/p\u003e\n\u003cdetails\u003e \n\u003csummary\u003eSpoiler Image\u003c/summary\u003e\n\u003cp\u003eOpen the image in a new tab for better readability.\n\n\n\u003cimg src="/exe/e4/TableWoodShaderGraph.png" alt="Table Wood Shader Graph" title="Table Wood Shader Graph" class="img"\u003e\n\u0026nbsp;\n\n\u003c/p\u003e\n\u003c/details\u003e\n\u003cp\u003eOnce you are satisfied with your solution, create separate materials for the table top (\u003cstrong\u003eTableTop\u003c/strong\u003e)\nand table legs (\u003cstrong\u003eTableLeg\u003c/strong\u003e), using our newly created Shader Graph as the shader. Notice, that we can\nindeed access the properties we defined even through the Unity Editor:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/TableWoodMaterial.png" alt="Table Wood Material" title="Table Wood Material" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eAfter applying it to the table model - \u003cstrong\u003eElement 0\u003c/strong\u003e for the table top and \u003cstrong\u003eElement 1\u003c/strong\u003e for the table legs -\nyour table-enjoying experience should be much more satisfactory:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e4/TableFancy.png" alt="Table Fancy" title="Table Fancy" class="img"\u003e\n\u0026nbsp;\n\n\n\u003ch3 id="personalizing-the-kitchen"\u003ePersonalizing the Kitchen\u003c/h3\u003e\n\u003cp\u003eYour final, and most demanding, task is the personalization of the kitchen scene to your liking.\nChoose \u003cstrong\u003eat least\u003c/strong\u003e 3 materials from the \u003cstrong\u003eAssets\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eMaterials\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eKitchen\u003c/strong\u003e directory, and\ncreate a Shader Graph nicely \u003cstrong\u003erepresenting the materials\u003c/strong\u003e. No need to create specific shaders for\nall of the materials, but take some time to play with the Shader Graph. The materials do not need\nto be realistic: \u003cstrong\u003eUnleash Your Imagination!\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eTips \u0026amp; Tricks:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor procedural materials which are position dependant, you may use the \u003ca href="https://docs.unity3d.com/Packages/com.unity.shadergraph@11.0/manual/UV-Node.html"\u003eUV node\u003c/a\u003e,\n\u003ca href="https://docs.unity3d.com/Packages/com.unity.shadergraph@11.0/manual/Tiling-And-Offset-Node.html?q=tiling%20and%20offset"\u003eTiling and Offset\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eIn case the UV mapping produces spatial artifacts, you can instead utilize the model\u0026rsquo;s position by\nusing the \u003ca href="https://docs.unity3d.com/Packages/com.unity.shadergraph@11.0/manual/Position-Node.html?q=Position"\u003ePosition Node\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="submit-the-exercise"\u003eSubmit the Exercise\u003c/h2\u003e\n\u003cp\u003eSubmit the results according to the procedure detailed in the \u003ca href="../sub"\u003eExercise Submission\u003c/a\u003e chapter.\u003c/p\u003e\n\u003ch2 id="faq"\u003eFAQ\u003c/h2\u003e\n\u003cp\u003eFollowing are some problems and solutions which may occur during this exercise:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNone so far!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003eProject Template : \u003ca href="/exe/e4/IZHV_E4.zip"\u003e[zip]\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="credits"\u003eCredits\u003c/h2\u003e\n\u003cp\u003eBase model of the kitchen: \u003ca href="https://creazilla.com/nodes/39964-kitchen-interiors-3d-model"\u003ecreazilla\u003c/a\u003e\u003c/p\u003e\n'}).add({id:11,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/l4/",title:"Lecture 4 : Unity as a Platform",description:"Lecture Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThis lecture focuses on the 2 hierarchies we find in games \u0026ndash; used\nfor Scenes and Game Objects.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/lec/IZHV_4_UnityPlatform_dark_handout.pdf"\u003e[dark]\u003c/a\u003e\n\u003ca href="/lec/IZHV_4_UnityPlatform_light_handout.pdf"\u003e[light]\u003c/a\u003e\n\u003ca href="/lec/IZHV_4_UnityPlatform_print_handout.pdf"\u003e[print]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:12,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/exercises/e5/",title:"Exercise 5 : Animation in 2D",description:"Exercise Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn this exercise, you will help with restoration of motive abilities of several fantastical\ncharacter by utilizing Unity\u0026rsquo;s 2D Animation system.\u003c/p\u003e\n\u003cp\u003eIn case of any problems, please see the \u003ca href="../e2"\u003esecond exercise\u003c/a\u003e (especially the \u003ca href="../e2#faq"\u003eFAQ\u003c/a\u003e). If the issues persist, contact me by e-mail (\u003cscript type="text/javascript" nonce="dXNlcj0iaGVsbG8iLGRvbWFpbj0iaGVua3ZlcmxpbmRlLmNvbSIsZG9jdW1lbnQud3JpdGUodXNlcisiQCIrZG9tYWluKTs="\u003euser="ipolasek",domain="fit.vutbr.cz",document.write(user+"@"+domain);\u003c/script\u003e\u003cnoscript\u003eipolasek at fit.vutbr.cz\u003c/noscript\u003e) or on Discord.\u003c/p\u003e\n\u003ch2 id="instructions"\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eThis exercise progressively takes you through the important parts of 2D animation:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eControlling animation from code and using the \u003cem\u003eAnimator\u003c/em\u003e interface\u003c/li\u003e\n\u003cli\u003ePreparing a 2D character sprite for both \u003cem\u003erigid\u003c/em\u003e and \u003cem\u003eskeletal\u003c/em\u003e animation\u003c/li\u003e\n\u003cli\u003eCreating \u003cem\u003eanimation clips\u003c/em\u003e for the character and using an \u003cem\u003eAnimation Controller\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDownload the \u003cstrong\u003eproject template\u003c/strong\u003e from the \u003ca href="#materials"\u003eMaterials\u003c/a\u003e section and follow the\nsame general procedure as in the case of previous exercises. In case of problems, see the\ninformation in the \u003ca href="../e2#import-the-project"\u003esecond exercise\u003c/a\u003e. Do not forget to switch to\n2D mode.\u003c/p\u003e\n\u003cp\u003eAfter setting up the project, you should be able to run it and move through the scene by\nusing the a standard control scheme - WASD + Space.\u003c/p\u003e\n\u003ch3 id="controlling-animation"\u003eControlling Animation\u003c/h3\u003e\n\u003cp\u003eIn Unity, most of the hard work required for animation is already done for you. The basic\ninterface we will use is the \u003cem\u003eAnimator\u003c/em\u003e component, which allows playback of \u003cem\u003eAnimation Clips\u003c/em\u003e\nthroug the use of an \u003cem\u003eAnimation Controller\u003c/em\u003e asset. Before we get to that, however, you will\nneed to fix some problems with the current version of the project.\u003c/p\u003e\n\u003cp\u003eAs you probably noticed, there is something wrong with the main character. Even though he is\nhappily moving through the scene, he is rather rigid. It would be much better if his actions\nwere accompanied by corresponding animations of the sprite itself.\u003c/p\u003e\n\u003cp\u003eTo get started, look into the \u003cstrong\u003eCharacter2DMovement\u003c/strong\u003e script in the \u003cstrong\u003eAssets/Scripts/Player/\u003c/strong\u003e\ndirectory. The pertinent parts of the code are located in the \u003cstrong\u003eAnimateCharacter\u003c/strong\u003e function,\nstarting on line 188.\u003c/p\u003e\n\u003cp\u003eStart by correctly orienting the character, based on the direction of movement (\u003cstrong\u003eTask #1a\u003c/strong\u003e).\nThere are several ways to accomplish this, but one of the easiest is to simply modify the\n\u003cem\u003etransform\u003c/em\u003e of the base \u003cem\u003eGameObject\u003c/em\u003e based on the desired direction. You can achieve this by\nrotating the character by 180 degrees around the y-axis. For more details and hints, see the\ncomment in the script file.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/Task1a.png" alt="Character Orientation" title="Character Orientation" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eAfter finishing the first part of this task, our character now at least looks in the correct\ndirection. However, he is still rather rigid and some animations would certainly help with that.\nTo achieve this, you will need to pass the current state from the \u003cem\u003egameplay\u003c/em\u003e code to the \u003cem\u003eAnimator\u003c/em\u003e\ncomponent, thus driving the animation (\u003cstrong\u003eTask #1b\u003c/strong\u003e). Again, the comment within the code itself\nshould provide you with all necessary information.\u003c/p\u003e\n\u003cp\u003eWhen you are finished, the character should now be able to walk, jump, fall, crouch, crawl, and,\nof course, stand idly by.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/Task1a.png" alt="Character Actions" title="Character Actions" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eNow, let\u0026rsquo;s look at the \u003cem\u003eAnimation Controller\u003c/em\u003e in some more detail. Open the \u003cstrong\u003eSpelunkyAnimationController\u003c/strong\u003e\nasset in the \u003cstrong\u003eAssets/Animations/Spelunky\u003c/strong\u003e folder. You should now be greeted with the Animator\ninterface:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/AnimatorInterface.png" alt="Animator Interface" title="Animator Interface" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eIt consists of three main parts. Both the \u003cem\u003eLayers\u003c/em\u003e and \u003cem\u003eParameters\u003c/em\u003e are contained within the tab\non the left side, while the right part of the window shows the \u003cem\u003eMain View\u003c/em\u003e. You can switch between\n\u003cem\u003eLayers\u003c/em\u003e and \u003cem\u003eParameters\u003c/em\u003e by using the switch in the top left corner. The third part is actually\nin the editor \u003cem\u003eInspector\u003c/em\u003e, showing details about the currently selected element.\u003c/p\u003e\n\u003cp\u003eThe animation \u003cem\u003eLayers\u003c/em\u003e are used for more advanced animations - such as animating several parts of\na character separately. The \u003cem\u003eParameters\u003c/em\u003e tab contains all of the animation parameters, which you\ncan later set from the gameplay code.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eMain View\u003c/em\u003e visualizes the animation state machine. Each \u003cem\u003enode\u003c/em\u003e represents a state, while the\n\u003cem\u003eedges\u003c/em\u003e show which transitions are possible. There are several special types of nodes. The \u003cstrong\u003eEntry\u003c/strong\u003e\nnode is the starting state of the state machine. It has a special connection to the default node,\nwhich is indicated by the \u003cstrong\u003eorange\u003c/strong\u003e color. The \u003cstrong\u003eAny State\u003c/strong\u003e node represents all nodes within the\ngraph, simplifying transitions which can happend from anywhere. Finally, the \u003cstrong\u003eExit\u003c/strong\u003e node tells the\nAnimator that the animation is finished. For more information on the nodes and transitions, you can\nalso see the \u003ca href="https://docs.unity3d.com/Manual/StateMachineTransitions.html"\u003eUnity Documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eCrucial are the properties of both \u003cem\u003enodes\u003c/em\u003e and \u003cem\u003eedges\u003c/em\u003e, which determine how the animations are played.\nWhen you select nodes and edges, the Inspector displays its properties. First, select the \u003cem\u003eJump\u003c/em\u003e node\nand see that it is indeed defining a \u003cem\u003eMotion\u003c/em\u003e, which is set to the \u003cem\u003eJump\u003c/em\u003e animation asset. Now select\nthe \u003cem\u003eIdle and Run\u003c/em\u003e node. This node is a more complex type, which defines its behavior through a Blend\nTree. Before we continue, notice that most of the properties can be controlled from the code as\nparameters. In order to actually see the Blend Tree, double click the \u003cem\u003eIdle and Run\u003c/em\u003e node. This takes\nyou inside the motion specification, with a separate graph. Blend Trees allow us to blend between\nanimation clips. To see how this one works, select the main node named \u003cem\u003eBlend Tree\u003c/em\u003e. The details are\nagain shown in the \u003cem\u003eInspector\u003c/em\u003e. In this case, we use the \u003cem\u003eSpeed\u003c/em\u003e parameter to change between the \u003cem\u003eIdle\u003c/em\u003e\nand \u003cem\u003eRun\u003c/em\u003e animations. You can see this in effect by draggin the \u003cem\u003eSpeed\u003c/em\u003e value knob on the main node.\nNotice that the highlight slowly shifts from \u003cem\u003eIdle\u003c/em\u003e to \u003cem\u003eRun\u003c/em\u003e. Now return back to the main graph by using\nthe orientation bar in the upper part of the window (\u003cem\u003eBase Layer\u003c/em\u003e).\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/AnimatorNodes.png" alt="Animator Nodes" title="Animator Nodes" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eSelect the edge going from \u003cem\u003eIdle and Run\u003c/em\u003e to \u003cem\u003eJump\u003c/em\u003e next. The properties of each edge specify both \u003cem\u003ehow\u003c/em\u003e\nthe transition should be performed, as well as what are the \u003cem\u003econditions\u003c/em\u003e. The middle part of the property\nwindow contains the transition timeline, which allows to change how long the transition should take. In\nthe bottom part, the conditions are listed. As you can see, we use the \u003cem\u003eJump\u003c/em\u003e property, and transition only\nwhen it is true.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/AnimatorEdges.png" alt="Animator Edges" title="Animator Edges" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eFinal, and probably most useful, thing to know about the Animator is that it can be used for debugging as\nwell. Run the game, keeping the Animator window visible. Now select the \u003cstrong\u003eMain/Player/Spelunky(Clone)\u003c/strong\u003e\nGameObject. The Animator now displays the current animation state machine for the selected character. Try\nrunning around the scene and jumping and see how the information is presented.\u003c/p\u003e\n\u003ch3 id="character-preparation"\u003eCharacter Preparation\u003c/h3\u003e\n\u003cp\u003eNow that you gave some more fluidity to our main hero, it is time to prepare your own character. In the\nsecond task, you will import a pre-made character and prepare it for both \u003cem\u003erigid\u003c/em\u003e and \u003cem\u003eskeletal\u003c/em\u003e animation.\u003c/p\u003e\n\u003cp\u003eStart by preparing the data by importing the character sprite. Locate the file in you filesystem (not the\nproject file browser) under \u003cstrong\u003e./OtherMaterials/Rikr/\u003c/strong\u003e and drag the \u003cstrong\u003eRikrSprite.psb\u003c/strong\u003e into the project\nfile structure under \u003cstrong\u003eAssets/Sprites/Characters/Rikr/\u003c/strong\u003e. Select the imported asset and make sure the\n\u003cem\u003eTexture Type\u003c/em\u003e is set to \u003cem\u003eSprite\u003c/em\u003e, \u003cem\u003eSprite Mode\u003c/em\u003e is \u003cem\u003eMultiple\u003c/em\u003e. Next set the \u003cem\u003eTexture\u003c/em\u003e -\u0026gt; \u003cem\u003eFilter Mode\u003c/em\u003e to\n\u003cem\u003ePoint\u003c/em\u003e, to keep the original pixels without any filtering, or \u003cem\u003eBilinear\u003c/em\u003e for a more smooth look. Now open\nthe sprite editor by pressing the \u003cem\u003eOpen Sprite Editor\u003c/em\u003e button, applying changes if prompted.\u003c/p\u003e\n\u003cp\u003eThe Sprite Editor consists of multiple tools, which can be switched using the selector in top-left corner.\nToday, we will be using the \u003cem\u003eSprite Editor\u003c/em\u003e and \u003cem\u003eSkinning Editor\u003c/em\u003e modes. First, switch to \u003cem\u003eSprite Editor\u003c/em\u003e.\nAs you can see, Unity has already split the sprite into its component parts, thanks to the PSB importer.\nAll you need to do is to separate the parts of your model into layers, keeping the composition in place.\nIn case you don\u0026rsquo;t have access to Photoshop, you can also use GIMP. In this case, you will need to first\nexport a \u003cem\u003e.psd\u003c/em\u003e file and then rename it to \u003cem\u003e.psb\u003c/em\u003e, but everything works just as well.\u003c/p\u003e\n\u003cp\u003eNow, select the left hand sprite and see the information displayed in the bottom right corner. You can\nmanually edit the bounding box of the sprite, border, and its name. Importantly, notice the pivot point\nsettings, which allow us to set a point around which the part should rotate. This is especially important\nfor \u003cem\u003eRigid Animation\u003c/em\u003e, as we will see later. Before continuing, you should go through all of the body parts\nand set their pivot point (\u003cstrong\u003eTask #2a\u003c/strong\u003e). You can do this by either dragging the small blue circle, or by\nsetting the \u003cem\u003eCustom Pivot\u003c/em\u003e value directly. Don\u0026rsquo;t forget to save your work by using the \u003cem\u003eApply\u003c/em\u003e button in\nthe top right corner of the window.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/SpriteEditor.png" alt="Sprite Editor" title="Sprite Editor" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eNext, you will perform \u003cem\u003eRigging\u003c/em\u003e and \u003cem\u003eSkinning\u003c/em\u003e of the character in 2D (\u003cstrong\u003eTask #2b\u003c/strong\u003e). First, Switch to the\n\u003cem\u003eSkinning Editor\u003c/em\u003e by using the selector in the top-left part of the window. The Skinning Editor consists of\nthe toolbar on the left side, the work are in the middle, and the bone hierarchy on the right. The bone hierarchy\nwindow may be closed by default, open it by using the \u003cem\u003eVisibility\u003c/em\u003e button in the top right corner of the window.\nOne further advantage to composing the character in an external software is that it is already pre-assembled,\nsignificantly simplifying our work.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/SkinningEditor.png" alt="Skinning Editor" title="Skinning Editor" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eTo start off, generate the proxy geometry which will be used for the skinning process. Simply select the\n\u003cem\u003eAuto Geometry\u003c/em\u003e tool and press the \u003cem\u003eGenerate For All Visible\u003c/em\u003e in the bottom right corner. Next, you will need\nto create the skeleton. Select \u003cem\u003eCreate Bone\u003c/em\u003e and place the two main bones within the thorax and one bone for\nthe head. To end the bone chain press the right mouse button. Next, create bones for the limbs, two for each.\nFirst select the point which will act as the parent - use the upper or lower thorax bone for hands and legs\nrespectively. Notice that the bones have a faint connection to the parent bone. Now name the bones by selecting\neach of them in the hierarchy and modifying the \u003cem\u003eName\u003c/em\u003e property.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/SkeletonEditor.png" alt="Skeleton Editor" title="Skeleton Editor" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eThe last objective is to perform the \u003cem\u003eSkinning\u003c/em\u003e by assigning bone weights to the proxy geometry. Start by running\nthe \u003cem\u003eAuto Weights\u003c/em\u003e tool with \u003cem\u003eAssociate Bones\u003c/em\u003e checked. The default weights are usually not assigned correctly.\nThis can be fixed by using the \u003cem\u003eBone Influence\u003c/em\u003e tool. After selecting it, double click the chest sprite to get\ninformation about the associated bones. As you will probably find out, some bones were mistakenly assigned to this\npart. You can remove or add bones by using the controll interface in the bottom right corner. Now remove all of the\nbones from the chest, except for the first two bones you have created (red and yellow on the image). Optionally you\ncan also also keep the first bone for each leg which will be useful to prevent mesh cracking. Go through all of the\nother parts and keep only corresponding bones for each of them. When you are finished, you will need to re-generate\nthe weights by using the \u003cem\u003eAuto Weights\u003c/em\u003e, but \u003cstrong\u003edo not forget\u003c/strong\u003e to disable the \u003cem\u003eAssociate Bones\u003c/em\u003e. Again, do not\nforget to save your work (top-right, \u003cem\u003eApply\u003c/em\u003e).\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/SkeletonSkinning.png" alt="Skeleton Skinning" title="Skeleton Skinning" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eNow you can check your skeleton by using the \u003cem\u003ePreview Pose\u003c/em\u003e tool. Drag and rotate any of the bones to check they\nare correctly connected to the skeleton. In case of any problems, you should return to the bone or weight editor\nnow, since these may later not update correctly when we start with the animation.\u003c/p\u003e\n\u003ch3 id="animating-the-character"\u003eAnimating the Character\u003c/h3\u003e\n\u003cp\u003eIn this final task, you will create several animation clips for your freshly prepared character (\u003cstrong\u003eTask #3\u003c/strong\u003e).\u003c/p\u003e\n\u003cp\u003eStart by preparing the prepared \u003cstrong\u003eAssets/Prefabs/Characters/Rikr\u003c/strong\u003e prefab into the scene. Then unpack it by right\nclicking on the \u003cem\u003eRikr\u003c/em\u003e GameObject in the Hierarchy and select \u003cem\u003ePrefab\u003c/em\u003e -\u0026gt; \u003cem\u003eUnpack Completely\u003c/em\u003e. Next, delete the\nplaceholder \u003cem\u003eRikrSprite\u003c/em\u003e under \u003cem\u003eRikr/Sprite/\u003c/em\u003e in the GameObject hierarchy. Now you can finally place your \u003cem\u003eRikrSprite\u003c/em\u003e\nasset located in \u003cstrong\u003eAssets/Sprites/Characters/Rikr/\u003c/strong\u003e under \u003cem\u003eRikr/Sprite/\u003c/em\u003e. These introductory steps are nor part\nof the Unity animation system, but are necessary to make your new asset work within the framework of the template.\nThis concludes the preparatory phase. When you select the Rikr GameObject, you should notice that both the parts\nand the bones are part of the hierarchy and should look something like this:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/RikrHierarchy.png" alt="Rikr Hierarchy" title="Rikr Hierarchy" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eStart by creating the \u003cem\u003eAnimation Controller\u003c/em\u003e under \u003cstrong\u003eAssets/Animations/Rikr\u003c/strong\u003e and set it as the current controller\nfor the \u003cem\u003eAnimator\u003c/em\u003e component of the \u003cem\u003eRikr\u003c/em\u003e Game Object. Open the \u003cem\u003eAnimator\u003c/em\u003e UI by double clicking the controller\nasset and add all of the properties you have seen in the first task:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSpeed : float\u003c/li\u003e\n\u003cli\u003eMoveSpeed : float\u003c/li\u003e\n\u003cli\u003eJump : bool\u003c/li\u003e\n\u003cli\u003eGrounded : bool\u003c/li\u003e\n\u003cli\u003eFall : bool\u003c/li\u003e\n\u003cli\u003eCrouch : bool\nThe Animation Controller is now ready for the animation clips.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo start creating animation clips, select the \u003cem\u003eRikr\u003c/em\u003e Game Object and open the \u003cem\u003eAnimation\u003c/em\u003e window (\u003cstrong\u003eWindow\u003c/strong\u003e -\u0026gt;\n\u003cstrong\u003eAnimation\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eAnimation\u003c/strong\u003e). You should be prompted to create a new \u003cem\u003eAnimation Clip\u003c/em\u003e by pressing the \u003cem\u003eCreate\u003c/em\u003e\nbutton. Place the animation clip into the \u003cstrong\u003eAssets/Animations/Rikr/\u003c/strong\u003e directory, and name it \u003cstrong\u003eIdle.anim\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eBefore creating the animation, let us first look at the UI of the \u003cem\u003eAnimation\u003c/em\u003e window. It is divided into two segments.\nThe list of target properties modified by our animation is on the left, while the timeline is on the right. The\nsimplest way to create a new animation is to use the \u003cem\u003eRecord\u003c/em\u003e mode. Start it by pressing the red circle button in\nthe top left corner of the UI. This mode automatically records any changes you make to the character and places them\nas keyframes into the timeline. \u003cem\u003eKeyframe\u003c/em\u003e represents a set of properties and associated values. Lets try this now\nby first placing the scrubber in the timeline to the \u003cem\u003e0:15\u003c/em\u003e mark. Then try, for example, moving the characters arm\nwhile the record mode is enabled and you should se the system automatically place a keyframe. Now, stop the record\nmode and try moving the scrubber between \u003cem\u003e0:00\u003c/em\u003e and \u003cem\u003e0:15\u003c/em\u003e time marks. You should see the animation system automatically\ninterpolate the in-between frames of the animation and produce smooth transition.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/AnimationTimelineRecord.png" alt="Animation Timeline" title="Animation Timeline" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eYou should now finish the idle animation, which can be just an empty clip, and create at least 2 additional animation\nclips representing running (\u003cstrong\u003eRun.anim\u003c/strong\u003e) and jumping (\u003cstrong\u003eJump.anim\u003c/strong\u003e). Try to create something simple at first, no\nneed for realism. Later, after completing this exercise, you can practice further by creating other animation clips.\u003c/p\u003e\n\u003cp\u003eNow that you have your \u003cem\u003eAnimation Clips\u003c/em\u003e, we can put them into action by using the \u003cem\u003eAnimation Controller\u003c/em\u003e. But first\nsome more boilerplate. To make the character switching easier, you will need to convert your \u003cem\u003eRikr\u003c/em\u003e Game Object into\na prefab. First make sure that the \u003cem\u003eRikr\u003c/em\u003e Game Object doesn\u0026rsquo;t have any translation applied - set it to 0, 0, 0 in case\nit does. Then drag the Game Object from the \u003cem\u003eHierarchy\u003c/em\u003e into the \u003cem\u003eProject\u003c/em\u003e window, placing it under \u003cstrong\u003eAssets/Prefabs/Characters\u003c/strong\u003e.\nThis should create it under a name \u003cem\u003eRikr1\u003c/em\u003e. Finally, select the \u003cem\u003ePlayer\u003c/em\u003e Game Object, scroll to the \u003cem\u003eCharacter Slector\u003c/em\u003e\ncomponent and place your newly created \u003cem\u003eRikr1\u003c/em\u003e prefab as one of the elements in the \u003cem\u003eCharacters\u003c/em\u003e list. To test that\neverything is correctly setup, start the game and switch the character by pressing the numerical keys (1-5). If you\nset the Rikr character correctly, it should be repeatedly playing one of your animation.\u003c/p\u003e\n\u003cp\u003eOpen the \u003cem\u003eAnimation Controller\u003c/em\u003e asset for \u003cem\u003eRikr\u003c/em\u003e and place all of you animation clips into the workspace. You can\ndrag them from the project window if they are not already there. As a first step you should make your \u003cem\u003eIdle\u003c/em\u003e animation\ndefault by right-clicking it and selecting \u003cem\u003eSet as layer default state\u003c/em\u003e. Next, connect the nodes together by using the\ncontext menu and selecting \u003cem\u003eMake Transition\u003c/em\u003e. Take inspiration from existing Animation Controllers within the project\ntemplate. In the most simple case, you could arrive at something similar to the following configuration:\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/RikrAnimationController.png" alt="Rikr Animation Controller" title="Rikr Animation Controller" class="img"\u003e\n\u0026nbsp;\n\n\n\u003cp\u003eYou should now test your controller ingame, and perform at least a few iterations. You will know when you are finished\nwith this task once you are satisfied with your results.\u003c/p\u003e\n\n\n\u003cimg src="/exe/e5/Praise.png" alt="Praise the Sun" title="Praise the Sun" class="img"\u003e\n\u0026nbsp;\n\n\n\u003ch2 id="submit-the-exercise"\u003eSubmit the Exercise\u003c/h2\u003e\n\u003cp\u003eSubmit the results according to the procedure detailed in the \u003ca href="../sub"\u003eExercise Submission\u003c/a\u003e chapter.\u003c/p\u003e\n\u003ch2 id="faq"\u003eFAQ\u003c/h2\u003e\n\u003cp\u003eFollowing are some problems and solutions which may occur during this exercise:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNone so far!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003eProject Template : \u003ca href="/exe/e5/IZHV_E5.zip"\u003e[zip]\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="credits"\u003eCredits\u003c/h2\u003e\n\u003cp\u003eAll of the non-original assets are credited in enclosed text files\u003c/p\u003e\n'}).add({id:13,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/l5/",title:"Lecture 5 : User Input",description:"Lecture Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThe focus of this lecture is the Input system in Games \u0026ndash; Processing,\nInput Types, and Input in Unity.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/lec/IZHV_5_UserInput_dark_handout.pdf"\u003e[dark]\u003c/a\u003e\n\u003ca href="/lec/IZHV_5_UserInput_light_handout.pdf"\u003e[light]\u003c/a\u003e\n\u003ca href="/lec/IZHV_5_UserInput_print_handout.pdf"\u003e[print]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:14,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/l6/",title:"Lecture 6 : Space and Bodies",description:"Lecture Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn this lecture, we take a look at the physics sub-system, what is its\ngoal within the game engine and some basic concepts it utilizes -\nNewtonian dynamics, constraints, solvers, and collisions.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/lec/IZHV_6_SpaceAndBodies_dark_handout.pdf"\u003e[dark]\u003c/a\u003e\n\u003ca href="/lec/IZHV_6_SpaceAndBodies_light_handout.pdf"\u003e[light]\u003c/a\u003e\n\u003ca href="/lec/IZHV_6_SpaceAndBodies_print_handout.pdf"\u003e[print]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:15,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/l7/",title:"Lecture 7 : Visualization and Rendering",description:"Lecture Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThis lecture focuses on some basic concepts of rendering, specifically\nwe take a look at the rendering pipeline, effects, and some real-time\ngame tricks.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/lec/IZHV_7_VisualizationAndRendering_dark_handout.pdf"\u003e[dark]\u003c/a\u003e\n\u003ca href="/lec/IZHV_7_VisualizationAndRendering_light_handout.pdf"\u003e[light]\u003c/a\u003e\n\u003ca href="/lec/IZHV_7_VisualizationAndRendering_print_handout.pdf"\u003e[print]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:16,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/l8/",title:"Lecture 8 : Assets and Models",description:"Lecture Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn this lecture we take a look at game assets and how they are managed\nwithin the game engine ecosystem - asset managent sub-system, creation\npipeline, and some techniques used therein.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/lec/IZHV_8_AssetsAndModels_dark_handout.pdf"\u003e[dark]\u003c/a\u003e\n\u003ca href="/lec/IZHV_8_AssetsAndModels_light_handout.pdf"\u003e[light]\u003c/a\u003e\n\u003ca href="/lec/IZHV_8_AssetsAndModels_print_handout.pdf"\u003e[print]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:17,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/l9/",title:"Lecture 9 : Scene Dynamics",description:"Lecture Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIn the ninth lecture we examine animation both in its general form and\nits specifics in computer games - traditional animation, sprites, skeleton,\nand the skinning process.\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003ePresentation :\n\u003ca href="/lec/IZHV_9_SceneDynamics_dark_handout.pdf"\u003e[dark]\u003c/a\u003e\n\u003ca href="/lec/IZHV_9_SceneDynamics_light_handout.pdf"\u003e[light]\u003c/a\u003e\n\u003ca href="/lec/IZHV_9_SceneDynamics_print_handout.pdf"\u003e[print]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:18,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/introduction/",title:"Introduction",description:"Introduction to Game Development course",content:'\u003ch2 id="course-information"\u003eCourse Information\u003c/h2\u003e\n\u003cp\u003eThe course is taught as a part of the undergraduate programme \u003ca href="https://www.fit.vut.cz/study/program/18/.en"\u003eInformation Technology\u003c/a\u003e at Brno Unversity of Technology.\u003c/p\u003e\n\u003cp\u003eFor complete details, see the \u003ca href="https://www.fit.vut.cz/study/course/15013/.en"\u003ecourse card\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="annotation"\u003eAnnotation\u003c/h3\u003e\n\u003cp\u003eThe ever-increasing impact of computer games, simulators, and \u0026ldquo;serious games\u0026rdquo; applications undeniably shows their future potential. However, their development requires a comprehensive overview of a wide range of topics and creative approaches used in solving various and unconventional problems. In the course Game Design Principles (IZH), we introduce participants to the issue of game development both in terms of theoretical algorithms and procedures, as well as practical experience using the Unity platform.\u003c/p\u003e\n'}).add({id:19,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/demonstrations/",title:"Demonstrations",description:"Demonstration Details",content:'\u003ch4 id="demonstration-1--tools-and-unity-platformcoursesizhvdemonstrationsd1-04102021"\u003e\u003ca href="/courses/izhv/demonstrations/d1"\u003eDemonstration 1 : Tools and Unity Platform\u003c/a\u003e [04.10.2021]\u003c/h4\u003e\n\u003ch4 id="demonstration-2--prototypes-and-inputcoursesizhvdemonstrationsd2-18102021"\u003e\u003ca href="/courses/izhv/demonstrations/d2"\u003eDemonstration 2 : Prototypes and Input\u003c/a\u003e [18.10.2021]\u003c/h4\u003e\n\u003ch4 id="demonstration-3--forms-of-visualizationcoursesizhvdemonstrationsd3-01112021"\u003e\u003ca href="/courses/izhv/demonstrations/d3"\u003eDemonstration 3 : Forms of Visualization\u003c/a\u003e [01.11.2021]\u003c/h4\u003e\n\u003ch4 id="demonstration-4--physical-interactioncoursesizhvdemonstrationsd4-15112021"\u003e\u003ca href="/courses/izhv/demonstrations/d4"\u003eDemonstration 4 : Physical Interaction\u003c/a\u003e [15.11.2021]\u003c/h4\u003e\n\u003ch4 id="demonstration-5--game-interface-29112021"\u003eDemonstration 5 : Game Interface [29.11.2021]\u003c/h4\u003e\n\u003ch4 id="demonstration-6--development-assignment-13122021"\u003eDemonstration 6 : Development Assignment [13.12.2021]\u003c/h4\u003e\n\u003c!--\n\n\n\n#### [Demonstration 5 : Game Interface](/courses/izhv/demonstrations/d5) \\[29.11.2021\\]\n\n#### [Demonstration 6 : Development Assignment](/courses/izhv/demonstrations/d6) \\[13.12.2021\\]\n\n--\u003e\n'}).add({id:20,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/exercises/",title:"Exercises",description:"Exercise Details",content:'\u003ch4 id="exercise-1--analysis-of-mechanicscoursesizhvexercisese1"\u003e\u003ca href="/courses/izhv/exercises/e1/"\u003eExercise 1 : Analysis of Mechanics\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id="exercise-2--unity-projectcoursesizhvexercisese2"\u003e\u003ca href="/courses/izhv/exercises/e2/"\u003eExercise 2 : Unity Project\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id="exercise-3--entity-controlcoursesizhvexercisese3"\u003e\u003ca href="/courses/izhv/exercises/e3/"\u003eExercise 3 : Entity Control\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id="exercise-4--materials-and-effectscoursesizhvexercisese4"\u003e\u003ca href="/courses/izhv/exercises/e4/"\u003eExercise 4 : Materials and Effects\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id="exercise-5--animation-in-2dcoursesizhvexercisese5"\u003e\u003ca href="/courses/izhv/exercises/e5/"\u003eExercise 5 : Animation in 2D\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id="exercise-6--inventory-interface"\u003eExercise 6 : Inventory Interface\u003c/h4\u003e\n\u003ch4 id="exercise-7--mechanics-tuning"\u003eExercise 7 : Mechanics Tuning\u003c/h4\u003e\n\u003ch4 id="exercise-submissioncoursesizhvexercisessub"\u003e\u003ca href="/courses/izhv/exercises/sub/"\u003eExercise Submission\u003c/a\u003e\u003c/h4\u003e\n\u003c!--\n\n#### [Exercise 6 : Inventory Interface](/courses/izhv/exercises/e6/)\n\n#### [Exercise 7 : Mechanics Tuning](/courses/izhv/exercises/e7/)\n\n--\u003e\n'}).add({id:21,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/lectures/",title:"Lectures",description:"Lecture Details",content:'\u003ch4 id="lecture-1--what-is-a-gamecoursesizhvlecturesl1-20092021"\u003e\u003ca href="/courses/izhv/lectures/l1/"\u003eLecture 1 : What is a Game\u003c/a\u003e [20.09.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-2--game-designcoursesizhvlecturesl2-27092021"\u003e\u003ca href="/courses/izhv/lectures/l2/"\u003eLecture 2 : Game Design\u003c/a\u003e [27.09.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-3--game-enginecoursesizhvlecturesl3-04102021"\u003e\u003ca href="/courses/izhv/lectures/l3/"\u003eLecture 3 : Game Engine\u003c/a\u003e [04.10.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-4--unity-as-a-platformcoursesizhvlecturesl4-11102021"\u003e\u003ca href="/courses/izhv/lectures/l4/"\u003eLecture 4 : Unity as a Platform\u003c/a\u003e [11.10.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-5--user-inputcoursesizhvlecturesl5-18102021"\u003e\u003ca href="/courses/izhv/lectures/l5/"\u003eLecture 5 : User Input\u003c/a\u003e [18.10.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-6--space-and-bodiescoursesizhvlecturesl6-25102021"\u003e\u003ca href="/courses/izhv/lectures/l6/"\u003eLecture 6 : Space and Bodies\u003c/a\u003e [25.10.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-7--visualization-and-renderingcoursesizhvlecturesl7-01112021"\u003e\u003ca href="/courses/izhv/lectures/l7/"\u003eLecture 7 : Visualization and Rendering\u003c/a\u003e [01.11.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-8--assets-and-modelscoursesizhvlecturesl8-08112021"\u003e\u003ca href="/courses/izhv/lectures/l8/"\u003eLecture 8 : Assets and Models\u003c/a\u003e [08.11.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-9--scene-dynamicscoursesizhvlecturesl9-15112021"\u003e\u003ca href="/courses/izhv/lectures/l9/"\u003eLecture 9 : Scene Dynamics\u003c/a\u003e [15.11.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-10--visual-interface-22112021"\u003eLecture 10 : Visual Interface [22.11.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-11--sound-system-29112021"\u003eLecture 11 : Sound System [29.11.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-12--idea-to-realization-06122021"\u003eLecture 12 : Idea to Realization [06.12.2021]\u003c/h4\u003e\n\u003ch4 id="lecture-13--game-development-13122021"\u003eLecture 13 : Game Development [13.12.2021]\u003c/h4\u003e\n\u003c!--\n\n#### [Lecture 10 : Visual Interface](/courses/izhv/lectures/l10/) \\[22.11.2021\\]\n\n#### [Lecture 11 : Sound System](/courses/izhv/lectures/l11/) \\[29.11.2021\\]\n\n#### [Lecture 12 : Idea to Realization](/courses/izhv/lectures/l12/) \\[06.12.2021\\]\n\n#### [Lecture 13 : Game Development](/courses/izhv/lectures/l13/) \\[13.12.2021\\]\n\n--\u003e\n'}).add({id:22,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/exercises/sub/",title:"Exercise Submission",description:"Exercise Details",content:'\u003ch2 id="description"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThis section is dedicated to information specific to the submission of your completed exercises.\u003c/p\u003e\n\u003cp\u003eIn case of any problems, please see the \u003ca href="#faq"\u003eFAQ\u003c/a\u003e. If your problem is not listed, contact me by\ne-mail (Tomas Polasek : \u003cscript type="text/javascript" nonce="dXNlcj0iaGVsbG8iLGRvbWFpbj0iaGVua3ZlcmxpbmRlLmNvbSIsZG9jdW1lbnQud3JpdGUodXNlcisiQCIrZG9tYWluKTs="\u003euser="ipolasek",domain="fit.vutbr.cz",document.write(user+"@"+domain);\u003c/script\u003e\u003cnoscript\u003eipolasek at fit.vutbr.cz\u003c/noscript\u003e) or on Discord.\u003c/p\u003e\n\u003ch2 id="setting-up"\u003eSetting Up\u003c/h2\u003e\n\u003cp\u003eStart by downloading the \u003cstrong\u003eweb template\u003c/strong\u003e from the \u003ca href="#materials"\u003eMaterials\u003c/a\u003e section and extract it\ninto a local directory \u003cstrong\u003eizhv/\u003c/strong\u003e. The structure of the web page is very simple:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eindex.html\u003c/strong\u003e : The main document containing a tab for each of the exercises.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edata/\u003c/strong\u003e : Folder used to store the completed exercises.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edata/link.txt\u003c/strong\u003e : File storing the link to the website repository.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edata/exe#\u003c/strong\u003e : Each exercise has its own folder. Each contains a \u003cstrong\u003elink.txt\u003c/strong\u003e file, used for\nstoring project URL. Additionally, for text-based tasks, the dummy \u003cstrong\u003eindex.html\u003c/strong\u003e is provided\nto automatically display the \u003cem\u003epdf\u003c/em\u003e document.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNext, you should create a git repository for the website. If you never used \u003ccode\u003egit\u003c/code\u003e before, there will\nbe a short tutorial in the \u003ca href="../e2#import-the-project"\u003esecond exercise\u003c/a\u003e, which you can go through later.\nHowever, if you want to complete this part immediatelly, you can also check some other online resources,\nsuch as the \u003ca href="https://docs.github.com/en/get-started/quickstart/hello-world"\u003eGitHub Hello World\u003c/a\u003e. Once\nyou have your git repository ready, you should put it within the \u003cstrong\u003elink.txt\u003c/strong\u003e file so that it is properly\ndisplayed on your website.\u003c/p\u003e\n\u003ch2 id="updating-template"\u003eUpdating Template\u003c/h2\u003e\n\u003cp\u003eAfter you finish each exercise, you will first need to update the web template. The procedure is\ndifferent based on the nature of the exercise.\u003c/p\u003e\n\u003ch3 id="common-information"\u003eCommon Information\u003c/h3\u003e\n\u003cp\u003eYou will need to create a separate git repository for each exercise. If you never worked with \u003ccode\u003egit\u003c/code\u003e\nbefore, the short tutorial in the \u003ca href="../e2#import-the-project"\u003esecond exercise\u003c/a\u003e should get you started.\nHowever, you can also use the many resources available on the web.\u003c/p\u003e\n\u003ch3 id="text-exercises"\u003eText Exercises\u003c/h3\u003e\n\u003cp\u003eFor text-based exercises, you will first need to get a \u003cem\u003epdf\u003c/em\u003e version of your document ready. If you\nused LaTeX, this should be automatically available. Word and similar tools have a specialized option\nfor pdf export. For other solutions, please see the documentation of the target software.\u003c/p\u003e\n\u003cp\u003eOnce you have the \u003cem\u003epdf\u003c/em\u003e of your document ready, all that should be necessary is to copy the file into\nthe corresponding \u003cstrong\u003edata/exe#\u003c/strong\u003e folder. Finally, fill in the link to your git repository in the \u003cstrong\u003elink.txt\u003c/strong\u003e\nfile contained in the corresponding exercise folder.\u003c/p\u003e\n\u003ch3 id="unity-exercises"\u003eUnity Exercises\u003c/h3\u003e\n\u003cp\u003eFor Unity exercises, you will be exporting the game in a \u003cstrong\u003eWebGL\u003c/strong\u003e format and publishing it on our simple\nwebsite. First, go to \u003cstrong\u003eFile\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eBuild Settings\u003c/strong\u003e and select \u003cstrong\u003eWebGL\u003c/strong\u003e from the list. If it is greyed\nout, you need to install the corresponding build dependency in the Unity Manager. Press \u003cstrong\u003eBuild\u003c/strong\u003e button\nand select an output directory - you may need to \u003cstrong\u003eSwitch Platform\u003c/strong\u003e first. After the initial build, the\nsubsequent ones should be much faster.\u003c/p\u003e\n\u003cp\u003eAfter the build is finished, the result should be opened in your browser. Check if everything looks good.\nThen, copy all of the content from the \u003cstrong\u003eWebGL\u003c/strong\u003e export folder into \u003cstrong\u003edata/exe#/\u003c/strong\u003e, so that \u003cstrong\u003eexe#\u003c/strong\u003e folder\ncontains \u003cstrong\u003elink.txt\u003c/strong\u003e, \u003cstrong\u003eindex.html\u003c/strong\u003e, \u003cstrong\u003eBuild/\u003c/strong\u003e, and \u003cstrong\u003eTemplateData/\u003c/strong\u003e. Finally, fill in link to your git\nrepository in the \u003cstrong\u003elink.txt\u003c/strong\u003e file.\u003c/p\u003e\n\u003ch2 id="web-deployment"\u003eWeb Deployment\u003c/h2\u003e\n\u003cp\u003eThe simple static web is now ready for deployment. You will need to follow the update and deployment procedure\nfor each exercise, changing the \u003cstrong\u003e#\u003c/strong\u003e for the corresponding exercise identifier. The deployment depends on which\nfaculty you are attending and server resources at your disposal:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFIT : Copy the complete \u003cstrong\u003eizhv/\u003c/strong\u003e directory to Merlin, under \u003cstrong\u003e~/WWW/\u003c/strong\u003e. For more information see the\n\u003ca href="https://www.fit.vut.cz/study/advisor/.en#osobni-stranky"\u003eStudy Advisor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFaVU : Update the website per instructions and skip the deployment. Instead of a link to the deployed\nwebsite, you should send me just the link you your main website git repository.\u003c/li\u003e\n\u003cli\u003eOther : Please contact me (Tomas Polasek : \u003cscript type="text/javascript" nonce="dXNlcj0iaGVsbG8iLGRvbWFpbj0iaGVua3ZlcmxpbmRlLmNvbSIsZG9jdW1lbnQud3JpdGUodXNlcisiQCIrZG9tYWluKTs="\u003euser="ipolasek",domain="fit.vutbr.cz",document.write(user+"@"+domain);\u003c/script\u003e\u003cnoscript\u003eipolasek at fit.vutbr.cz\u003c/noscript\u003e) so we\ncan agree on some solution which will be usable in your case.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="submit-the-exercise"\u003eSubmit the Exercise\u003c/h2\u003e\n\u003cp\u003eThe final step in the process is to check that the website is \u003cstrong\u003eworking as expected\u003c/strong\u003e and sending me\n(Tomas Polasek : \u003cscript type="text/javascript" nonce="dXNlcj0iaGVsbG8iLGRvbWFpbj0iaGVua3ZlcmxpbmRlLmNvbSIsZG9jdW1lbnQud3JpdGUodXNlcisiQCIrZG9tYWluKTs="\u003euser="ipolasek",domain="fit.vutbr.cz",document.write(user+"@"+domain);\u003c/script\u003e\u003cnoscript\u003eipolasek at fit.vutbr.cz\u003c/noscript\u003e) an \u003cstrong\u003ee-mail\u003c/strong\u003e with following information:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSubject : [IZHV] Exercise # Solution\u003c/li\u003e\n\u003cli\u003eContent :\n\u003cul\u003e\n\u003cli\u003eHow long it took you to complete this task - important for me to determine if I should reduce their complexity.\u003c/li\u003e\n\u003cli\u003e(FIT) Link to the website hosting the exercises.\u003c/li\u003e\n\u003cli\u003e(FaVU) Link you your primary website git repository.\u003c/li\u003e\n\u003cli\u003eAny other ideas or feedback you may have!\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="faq"\u003eFAQ\u003c/h2\u003e\n\u003cp\u003eFollowing are some problems and solutions which were already encountered and (hopefully) fixed.\u003c/p\u003e\n\u003ch3 id="web-template-problems"\u003eWeb Template Problems\u003c/h3\u003e\n\u003cp\u003eProblems and solutions for problems with the web template:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePDF document is not being displayed\u003c/strong\u003e : Check that the corresponding exercise folder \u003cstrong\u003edata/exe#\u003c/strong\u003e contains\nthe dummy \u003cstrong\u003eindex.html\u003c/strong\u003e file. If it is missing, you can either \u003cem\u003ere-download\u003c/em\u003e the web template and use a new\nversion, or \u003cem\u003ecopy\u003c/em\u003e the \u003cstrong\u003eindex.html\u003c/strong\u003e file from the \u003cstrong\u003e/data/exe1/\u003c/strong\u003e folder and modify \u003ccode\u003esrc=\u0026quot;exe6.pdf\u0026quot;\u003c/code\u003e to correspond\nwith your file name.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="webgl-build-problems"\u003eWebGL Build Problems\u003c/h3\u003e\n\u003cp\u003eSome browsers have problems with loading of the content - be it from the local Unity web server or the deployed\nversion. \u003cstrong\u003eI recommend using the Chrome web browser\u003c/strong\u003e for testing, since it is usually the one least problematic.\nI will be using Chrome to check your submissions, having the project work on other browsers should be considered\noptional.\u003c/p\u003e\n\u003cp\u003eIn case of the WebGL Build, the following problems / errors may occur:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u0026ldquo;both async and sync fetching of the wasm failed\u0026rdquo;\u003c/strong\u003e : Try the following setting in the Unity Editor: \u003cstrong\u003eEdit\u003c/strong\u003e\n-\u0026gt; \u003cstrong\u003eProject Settings\u003c/strong\u003e -\u0026gt; \u003cstrong\u003ePlayer\u003c/strong\u003e -\u0026gt; \u003cstrong\u003eWebGL Tab\u003c/strong\u003e (HTML5 logo) -\u0026gt; \u003cstrong\u003ePublishing Settings\u003c/strong\u003e, enable \u0026ldquo;Decompression\nFallback\u0026rdquo; and set \u0026ldquo;Compression Format\u0026rdquo; to \u0026ldquo;Disabled\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u0026ldquo;TypeError: JSEvents.lastGamepadState is null\u0026rdquo;\u003c/strong\u003e : No known solution. It only sporadically manifests itself on\nsome versions of the Firefox browser (92, 93, 95).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOther Build Failures\u003c/strong\u003e : Try running the build multiple times. If that doesn\u0026rsquo;t help then restart Unity, clean\nthe build directory and re-build.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe goal of this exercise is to get acquainted with the Unity Platform, build\na simple project, and publish it on the web.\u003c/p\u003e\n\u003cp\u003eFirst, follow the instructions to setup the environment and then follow up with\u003c/p\u003e\n\u003ch2 id="materials"\u003eMaterials\u003c/h2\u003e\n\u003cp\u003eWeb Template : \u003ca href="/exe/sub/IZHV_web.zip"\u003e[zip]\u003c/a\u003e\u003c/p\u003e\n'}).add({id:23,href:"http://cphoto.fit.vutbr.cz/ludo/courses/izhv/",title:"Introduction to Game Development",description:"",content:""}).add({id:24,href:"http://cphoto.fit.vutbr.cz/ludo/courses/",title:"Courses",description:"Information about Past, Current, and Future courses",content:"\u003cp\u003eInformation about Past, Present, and Future courses\u003c/p\u003e\n"}),search.addEventListener('input',b,!0),suggestions.addEventListener('click',c,!0);function b(){var d,e;const c=5;d=this.value,e=a.search(d,{limit:c,enrich:!0}),suggestions.classList.remove('d-none'),suggestions.innerHTML="";const b={};e.forEach(a=>{a.result.forEach(a=>{b[a.doc.href]=a.doc})});for(const d in b){const e=b[d],a=document.createElement('div');if(a.innerHTML='<a href><span></span><span></span></a>',a.querySelector('a').href=d,a.querySelector('span:first-child').textContent=e.title,a.querySelector('span:nth-child(2)').textContent=e.description,suggestions.appendChild(a),suggestions.childElementCount==c)break}}function c(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()